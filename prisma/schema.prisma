generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  sui_address String        @unique
  commit      Decimal       @db.Decimal(10, 2)
  job_id      job_details[]
  Proposal    Proposal[]
}

model PushSubscription {
  id           String   @id @default(cuid())
  sui_address  String   @unique
  subscription String
  createdAt    DateTime @default(now())

  @@index([sui_address])
}

model Notification {
  id          String   @id @default(cuid())
  sui_address String
  title       String
  message     String
  type        String
  metadata    Json?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([sui_address])
}

model job_details {
  id               String     @id
  sui_address      String
  title            String
  description      String
  long_description String
  budget           String
  time_posted      String
  category         String
  expertise        String
  proposals        String[]
  client_rating    Decimal    @db.Decimal
  client_location  String
  job_type         String
  project_length   String
  weekly_hours     String?
  skills           String[]
  activity_on      String
  client_history   Json
  attachments      String[]
  questions        String[]
  job_status       JobStatus  @default(OPEN)
  job_proposals    Proposal[] // Relation to proposals
  userId           String // Foreign key referencing User's id
  user             User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([sui_address])
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Proposal {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Freelancer info
  freelancer_address String // Freelancer's Sui wallet address

  // Job relationship
  job   job_details @relation(fields: [jobId], references: [id])
  jobId String

  // Proposal details
  bid_type         BidType @default(FIXED)
  total_bid        Decimal @db.Decimal
  project_duration String
  cover_letter     String  @db.Text

  // Additional features
  is_boost Boolean        @default(false)
  is_draft Boolean        @default(false)
  status   ProposalStatus @default(PENDING)

  // Related data
  milestones Milestone[]
  answers    ProposalAnswer[]
  userId     String // Foreign key referencing User's id
  user       User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, jobId])
  @@index([userId])
  @@index([jobId])
}

model Milestone {
  id          String          @id @default(cuid())
  proposal    Proposal        @relation(fields: [proposalId], references: [id])
  proposalId  String
  description String
  amount      Decimal         @db.Decimal
  due_date    DateTime
  status      MilestoneStatus @default(PENDING)

  @@index([proposalId])
}

model ProposalAnswer {
  id         String   @id @default(cuid())
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String
  question   String
  answer     String   @db.Text

  @@index([proposalId])
}

enum ProposalStatus {
  DRAFT
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BidType {
  FIXED
  MILESTONE
}
