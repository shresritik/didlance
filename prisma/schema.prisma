generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_DATABASE_URL")
}

model User {
  sui_address String        @id @unique
  commit      Decimal       @db.Decimal(10, 2)
  job_id      job_details[]
  Proposal    Proposal[]
  posts       Post[]
  Like        Like[]
  Comment     Comment[]
}

model Post {
  id          String    @id @default(cuid())
  url         String
  post        String
  User        User?     @relation(fields: [sui_address], references: [sui_address])
  sui_address String
  createdAt   DateTime  @default(now())
  Like        Like[]
  Comment     Comment[]
}

model Like {
  id          String   @id @default(cuid())
  user        User?    @relation(fields: [sui_address], references: [sui_address])
  sui_address String
  post        Post     @relation(fields: [postId], references: [id])
  postId      String
  createdAt   DateTime @default(now())

  @@unique([sui_address, postId]) // Ensures a user can like a post only once
}

model Comment {
  id          String   @id @default(cuid())
  content     String
  user        User?    @relation(fields: [sui_address], references: [sui_address])
  sui_address String
  post        Post     @relation(fields: [postId], references: [id])
  postId      String
  createdAt   DateTime @default(now())
}

model PushSubscription {
  id           String   @id @default(cuid())
  sui_address  String   @unique
  subscription String
  createdAt    DateTime @default(now())

  @@index([sui_address])
}

model Notification {
  id          String   @id @default(cuid())
  sui_address String
  title       String
  message     String
  type        String
  metadata    Json?
  isRead      Boolean  @default(false)
  createdAt   DateTime @default(now())

  @@index([sui_address])
}

model job_details {
  id               String     @id
  title            String
  description      String
  long_description String
  budget           String
  time_posted      String
  category         String
  expertise        String
  proposals        String[]
  client_rating    Decimal    @db.Decimal
  client_location  String
  min_stake        Int?       @default(0)
  job_type         String
  project_length   String
  weekly_hours     String?
  skills           String[]
  activity_on      String
  client_history   Json
  attachments      String[]
  questions        String[]
  job_status       JobStatus  @default(OPEN)
  job_proposals    Proposal[] // Relation to proposals
  User             User?      @relation(fields: [sui_address], references: [sui_address])
  sui_address      String?

  @@index([sui_address])
}

enum JobStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model Proposal {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Job relationship
  job   job_details @relation(fields: [jobId], references: [id])
  jobId String

  // Proposal details
  bid_type         BidType @default(FIXED)
  total_bid        Decimal @db.Decimal
  project_duration String
  cover_letter     String  @db.Text

  // Additional features
  is_boost Boolean        @default(false)
  is_draft Boolean        @default(false)
  status   ProposalStatus @default(PENDING)

  // Related data
  milestones  Milestone[]
  answers     ProposalAnswer[]
  User        User?            @relation(fields: [sui_address], references: [sui_address])
  sui_address String?

  @@unique([sui_address, jobId])
  @@index([sui_address])
  @@index([jobId])
}

model Milestone {
  id          String          @id @default(cuid())
  proposal    Proposal        @relation(fields: [proposalId], references: [id])
  proposalId  String
  description String
  amount      Decimal         @db.Decimal
  due_date    DateTime
  status      MilestoneStatus @default(PENDING)

  @@index([proposalId])
}

model ProposalAnswer {
  id         String   @id @default(cuid())
  proposal   Proposal @relation(fields: [proposalId], references: [id])
  proposalId String
  question   String
  answer     String   @db.Text

  @@index([proposalId])
}

enum ProposalStatus {
  DRAFT
  PENDING
  ACCEPTED
  REJECTED
  WITHDRAWN
}

enum MilestoneStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum BidType {
  FIXED
  MILESTONE
}
